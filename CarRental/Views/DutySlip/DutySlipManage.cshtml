@model CarRental.ViewModel.DutySlipViewModel

@{
    ViewBag.Title = "DutySlipManage";
}

<style>
    .chosen-container.chosen-container-single {
        width: 100% !important;
    }
</style>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.DutySlipId)

    <div class="card-group">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Duty Slip</h4>
                <hr />

                <div class="form-group">
                    @Html.LabelFor(model => model.BranchId, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.DropDownListFor(model => model.BranchId, Model.BranchList, "--- Select Branch ---", new { @class = "form-control form-control-sm chosen-select-single" })
                    @Html.ValidationMessageFor(model => model.BranchId, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SlipNumber, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.EditorFor(model => model.SlipNumber, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                    @Html.ValidationMessageFor(model => model.SlipNumber, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SlipDate, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    <div class='input-group input-group-sm' id='datetimepicker3'>
                        @Html.EditorFor(model => model.SlipDate, new { htmlAttributes = new { @class = "form-control form-control-sm", aria_describedby = "sizing-addon1" } })
                        <span class="input-group-addon" id="sizing-addon1">
                            <span class="fa fa-calendar"></span>
                        </span>
                    </div>
                    @Html.ValidationMessageFor(model => model.SlipDate, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PartyId, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.DropDownListFor(model => model.PartyId, Model.PartyList, "--- Select Company ---", new { @class = "form-control form-control-sm chosen-select-single" })
                    @Html.ValidationMessageFor(model => model.PartyId, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.BookingId, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.DropDownListFor(model => model.BookingId, Model.BookingNoList, "--- Select Booking No ---", new { @class = "form-control form-control-sm chosen-select-single" })
                    @Html.ValidationMessageFor(model => model.BookingId, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.BookingType, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.TextBoxFor(model => model.BookingType, new { @class = "form-control form-control-sm", readOnly = "readOnly" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.BookingBy, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.TextBoxFor(model => model.BookingBy, new { @class = "form-control form-control-sm", readOnly = "readOnly" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ReportingTo, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.TextBoxFor(model => model.ReportingTo, "{0:HH:mm}", new { @class = "form-control form-control-sm", readOnly = "readOnly" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ReportingLocation, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.TextAreaFor(model => model.ReportingLocation, new { @class = "form-control form-control-sm", rows = "3", readOnly = "readOnly" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ReportingTime, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.TextBoxFor(model => model.ReportingTime, new { @class = "form-control form-control-sm", readOnly = "readOnly" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CarModel, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.TextBoxFor(model => model.CarModel, new { @class = "form-control form-control-sm", readOnly = "readOnly" })
                </div>                

            </div>
        </div>
        <div class="card">
            <div class="card-body">

                <div class="form-group">
                    @Html.LabelFor(model => model.DutyType, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.TextBoxFor(model => model.DutyType, new { @class = "form-control form-control-sm", readOnly = "readOnly" })
                </div>

                <div class="form-group">
                    <label class="col-form-label col-form-label-sm">Duty Date : From / To</label>
                    <div class="form-inline">
                        <div class="form-group">
                            @Html.TextBoxFor(model => model.DutyDateFrom, "{0:dd/MM/yyyy}", new { @class = "form-control form-control-sm mb-2 mr-sm-2 mb-sm-0", readOnly = "readOnly" })
                        </div>
                        <div class="form-group">
                            @Html.TextBoxFor(model => model.DutyDateTo, "{0:dd/MM/yyyy}", new { @class = "form-control form-control-sm", readOnly = "readOnly" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Mobile1, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.TextBoxFor(model => model.Mobile1, new { @class = "form-control form-control-sm", readOnly = "readOnly" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Mobile2, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.TextBoxFor(model => model.Mobile2, new { @class = "form-control form-control-sm", readOnly = "readOnly" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Mobile3, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.TextBoxFor(model => model.Mobile3, new { @class = "form-control form-control-sm", readOnly = "readOnly" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CarType, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.DropDownListFor(model => model.CarType, new SelectList(new List<SelectListItem>
                                                                                    {
                                                                                        new SelectListItem{ Text = "Owner", Value = "OW" },
                                                                                        new SelectListItem{ Text = "Operator", Value = "OP" }
                                                                                    }, "Value", "Text"), new { @class = "form-control form-control-sm" })
                    @Html.ValidationMessageFor(model => model.CarType, "", new { @class = "text-danger" })
                </div>

                <div id="owner">
                    <div class="form-group">
                        @Html.LabelFor(model => model.CarId, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                        @Html.DropDownListFor(model => model.CarId, Model.CarNumberList, "--- Select Car Number ---", new { @class = "form-control form-control-sm chosen-select-single" })
                        @Html.ValidationMessageFor(model => model.CarId, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.DriverId, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                        @Html.DropDownListFor(model => model.DriverId, Model.DriverNameList, "--- Select Driver ---", new { @class = "form-control form-control-sm chosen-select-single" })
                        @Html.ValidationMessageFor(model => model.DriverId, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.DriverMobileNo, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                        @Html.EditorFor(model => model.DriverMobileNo, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                        @Html.ValidationMessageFor(model => model.DriverMobileNo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div id="operator" style="display:none;">
                    <div class="form-group">
                        @Html.LabelFor(model => model.OP_CarNumber, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                        @Html.EditorFor(model => model.OP_CarNumber, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                        @Html.ValidationMessageFor(model => model.OP_CarNumber, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.OP_CarRegisterNumber, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                        @Html.EditorFor(model => model.OP_CarRegisterNumber, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                        @Html.ValidationMessageFor(model => model.OP_CarRegisterNumber, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.OP_DriverName, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                        @Html.EditorFor(model => model.OP_DriverName, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                        @Html.ValidationMessageFor(model => model.OP_DriverName, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.OP_DriverMobile, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                        @Html.EditorFor(model => model.OP_DriverMobile, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                        @Html.ValidationMessageFor(model => model.OP_DriverMobile, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SupplierId, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.DropDownListFor(model => model.SupplierId, Model.SupplierList, "--- Select Supplier ---", new { @class = "form-control form-control-sm chosen-select-single" })
                    @Html.ValidationMessageFor(model => model.SupplierId, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PayableToDriver, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.DropDownListFor(model => model.PayableToDriver, new SelectList(new List<SelectListItem>
                                                                                    {
                                                                                        new SelectListItem{ Text = "Yes", Value = "true" },
                                                                                        new SelectListItem{ Text = "No", Value = "false" }
                                                                                    }, "Value", "Text"), new { @class = "form-control form-control-sm" })
                    @Html.ValidationMessageFor(model => model.PayableToDriver, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DriverBalance, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.EditorFor(model => model.DriverBalance, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                    @Html.ValidationMessageFor(model => model.DriverBalance, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.BillingType, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.DropDownListFor(model => model.BillingType, new SelectList(new List<SelectListItem>
                                                                                    {
                                                                                        new SelectListItem{ Text = "Casual", Value = "C" },
                                                                                        new SelectListItem{ Text = "Monthly", Value = "M" }
                                                                                    }, "Value", "Text"), new { @class = "form-control form-control-sm" })
                    @Html.ValidationMessageFor(model => model.BillingType, "", new { @class = "text-danger" })
                </div>

            </div>
        </div>
        <div class="card">
            <div class="card-body">                

                <div class="form-group">
                    <label class="col-form-label col-form-label-sm">Time Reading (24hr format)</label>
                    <div class="form-inline">
                        <div class="form-group" style="width:33.35%;">
                            <div class='input-group input-group-sm mb-2 mr-sm-2 mb-sm-0' id='datetimepicker5a'>
                                @Html.EditorFor(model => model.OpeningTime, new { htmlAttributes = new { @class = "form-control form-control-sm", aria_describedby = "sizing-addon1", placeholder = "Start" } })
                                <span class="input-group-addon" id="sizing-addon1">
                                    <span class="fa fa-clock-o"></span>
                                </span>
                            </div>
                            @Html.ValidationMessageFor(model => model.OpeningTime, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group" style="width:33.33%;">
                            <div class='input-group input-group-sm mb-2 mr-sm-2 mb-sm-0' id='datetimepicker5b'>
                                @Html.EditorFor(model => model.ClosingTime, new { htmlAttributes = new { @class = "form-control form-control-sm", aria_describedby = "sizing-addon1", placeholder = "Stop" } })
                                <span class="input-group-addon" id="sizing-addon1">
                                    <span class="fa fa-clock-o"></span>
                                </span>
                            </div>
                            @Html.ValidationMessageFor(model => model.ClosingTime, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group" style="width:33.33%;">
                            @Html.EditorFor(model => model.TotalTime, new { htmlAttributes = new { @class = "form-control form-control-sm", style = "width:100%;", placeholder = "Total Time", @readOnly = "readOnly" } })
                            @Html.ValidationMessageFor(model => model.OpeningKM, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label class="col-form-label col-form-label-sm">K.M. Reading</label>
                    <div class="form-inline">
                        <div class="form-group" style="width:33.33%;">
                            @Html.EditorFor(model => model.OpeningKM, new { htmlAttributes = new { @class = "form-control form-control-sm mb-2 mr-sm-2 mb-sm-0", style = "width:100%;", placeholder = "Start" } })
                            @Html.ValidationMessageFor(model => model.OpeningKM, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group" style="width:33.33%;">
                            @Html.EditorFor(model => model.ClosingKM, new { htmlAttributes = new { @class = "form-control form-control-sm mb-2 mr-sm-2 mb-sm-0", style = "width:100%;", placeholder = "Stop" } })
                            @Html.ValidationMessageFor(model => model.OpeningKM, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group" style="width:33.33%;">
                            @Html.EditorFor(model => model.TotalKM, new { htmlAttributes = new { @class = "form-control form-control-sm", style = "width:100%;", placeholder = "Total Km", @readOnly = "readOnly" } })
                            @Html.ValidationMessageFor(model => model.OpeningKM, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ReleasePointId, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.DropDownListFor(model => model.ReleasePointId, Model.ReleasePointList, "--- Select Release Point ---", new { @class = "form-control form-control-sm chosen-select-single" })
                    @Html.ValidationMessageFor(model => model.ReleasePointId, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.AdvanceDriver, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.EditorFor(model => model.AdvanceDriver, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                    @Html.ValidationMessageFor(model => model.AdvanceDriver, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ParkingCharge, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.EditorFor(model => model.ParkingCharge, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                    @Html.ValidationMessageFor(model => model.ParkingCharge, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.FuelCharge, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.EditorFor(model => model.FuelCharge, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                    @Html.ValidationMessageFor(model => model.FuelCharge, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.OtherCharge, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.EditorFor(model => model.OtherCharge, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                    @Html.ValidationMessageFor(model => model.OtherCharge, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <label class="col-form-label col-form-label-sm">Extra Charges</label>
                    <div class="form-inline">
                        <div class="form-group">
                            @Html.EditorFor(model => model.ExtraChargeName, new { htmlAttributes = new { @class = "form-control form-control-sm mb-2 mr-sm-2 mb-sm-0", style = "width:100%;", placeholder = "Name" } })
                            @Html.ValidationMessageFor(model => model.ExtraChargeName, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.EditorFor(model => model.ExtraAmount, new { htmlAttributes = new { @class = "form-control form-control-sm", style = "width:100%;", placeholder = "Amount" } })
                            @Html.ValidationMessageFor(model => model.ExtraAmount, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label class="col-form-label col-form-label-sm">Paid / Received</label>
                    <div class="form-inline">
                        <div class="form-group">
                            @Html.EditorFor(model => model.PaidAmount, new { htmlAttributes = new { @class = "form-control form-control-sm mb-2 mr-sm-2 mb-sm-0" } })
                            @Html.ValidationMessageFor(model => model.PaidAmount, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.EditorFor(model => model.ReceivedAmount, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                            @Html.ValidationMessageFor(model => model.ReceivedAmount, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.AdvanceTaken, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.EditorFor(model => model.AdvanceTaken, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                    @Html.ValidationMessageFor(model => model.AdvanceTaken, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Route, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                    @Html.TextAreaFor(model => model.Route, new { @class = "form-control form-control-sm", rows = "3" })
                    @Html.ValidationMessageFor(model => model.Route, "", new { @class = "text-danger" })
                </div>

                <br />
                <input type="submit" value="Save" class="btn btn-primary btn-sm" />
            </div>
        </div>
    </div>
}
<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section scripts{
    <script>
        $('#datetimepicker3').datetimepicker({
            format: 'DD/MM/YYYY',
            showClear: true
        });

        $('#datetimepicker4').datetimepicker({
            showClear: true,
            format: 'HH:mm',
        });

        $('#datetimepicker5a').datetimepicker({
            showClear: true,
            format: 'HH:mm',
        });

        $('#datetimepicker5b').datetimepicker({
            showClear: true,
            format: 'HH:mm',
        });
    </script>
    <script>
        $('#BookingId').change(function () {
            var value = $('#BookingId option:selected').val();
            var index = $("#BookingId").prop('selectedIndex');

            if (index != 0) {
                var serviceURL = '@Url.Action("GetBookingInfo", "DutySlip")';

                $.ajax({
                    type: "POST",
                    url: serviceURL,
                    data: JSON.stringify(addRequestVerificationToken({ bookingId: value })),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: successFunc,
                    error: errorFunc
                });

                function addRequestVerificationToken(data) {
                    data.__RequestVerificationToken = $('input[name=__RequestVerificationToken]').val();
                    return data;
                };

                function successFunc(data, status) {
                    showGuestData(data);
                };

                function errorFunc(jqXHR, exception) {
                    console.log(jqXHR);
                };

                function showGuestData(data) {
                    $('#BookingType').val(data.bookingType);
                    $('#BookingBy').val(data.bookingBy);
                    $('#ReportingTo').val(data.reportingTo);
                    $('#ReportingLocation').val(data.reportingLocation);
                    $('#ReportingTime').val(data.reportingTime);
                    $('#CarModel').val(data.modelCar);
                    $('#DutyType').val(data.dutyType);
                    $('#DutyDateFrom').val(data.dateFrom);
                    $('#DutyDateTo').val(data.dateTo);
                    $('#Mobile1').val(data.mobile1);
                    $('#Mobile2').val(data.mobile2);
                    $('#Mobile3').val(data.mobile3);
                };
            }
            else {
                $('#BookingType').val('');
                $('#BookingBy').val('');
                $('#ReportingTo').val('');
                $('#ReportingLocation').val('');
                $('#ReportingTime').val('');
                $('#CarModel').val('');
                $('#DutyType').val('');
                $('#DutyDateFrom').val('');
                $('#DutyDateTo').val('');
                $('#Mobile1').val('');
                $('#Mobile2').val('');
                $('#Mobile3').val('');
            }
        });
    </script>
    <script>
        $(document).ready(function () {
            toggleCarType();
        });

        $('#CarType').change(function () {
            toggleCarType();
        });

        function toggleCarType() {
            var value = $('#CarType option:selected').val();
            var index = $("#CarType").prop('selectedIndex');

            if (value == "OW") {
                $('#owner').show();
                $('#operator').hide();
            }
            else {
                $('#owner').hide();
                $('#operator').show();
            }
        };
    </script>
    <script>
        $('#PartyId').change(function () {
            var value = $('#PartyId option:selected').val();
            var index = $("#PartyId").prop('selectedIndex');

            if (index != 0) {
                var serviceURL = '@Url.Action("GetBookingNumber", "DutySlip")';

                $.ajax({
                    type: "POST",
                    url: serviceURL,
                    data: JSON.stringify(addRequestVerificationToken({ partyId: value })),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: successFunc,
                    error: errorFunc
                });

                function addRequestVerificationToken(data) {
                    data.__RequestVerificationToken = $('input[name=__RequestVerificationToken]').val();
                    return data;
                };

                function successFunc(data, status) {
                    bindBookingNumber(data);
                };

                function errorFunc(jqXHR, exception) {
                    console.log(jqXHR);
                };

                function bindBookingNumber(data) {

                    var list = data.bookingNos

                    $("#BookingId").empty();

                    var opt = '<option value=' + "" + '>--- Select Booking No ---</option>';

                    for (var i = 0; i < list.length; i++) {
                        opt += '<option value=' + list[i].Value + '>' + list[i].Text + '</option>';
                    }

                    $('#BookingId').append(opt);

                    $("#BookingId").trigger("chosen:updated");
                    $("#BookingId").trigger("liszt:updated");
                };
            }
            else {

            }
        });
    </script>
    <script>
        $('#DriverId').change(function () {
            var value = $('#DriverId option:selected').val();
            var index = $("#DriverId").prop('selectedIndex');

            $("#DriverMobileNo").val('');
            $("#DriverBalance").val('');

            if (index != 0) {
                var serviceURL = '@Url.Action("GetDriverInfo", "DutySlip")';

                $.ajax({
                    type: "POST",
                    url: serviceURL,
                    data: JSON.stringify(addRequestVerificationToken({ driverId: value })),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: successFunc,
                    error: errorFunc
                });

                function addRequestVerificationToken(data) {
                    data.__RequestVerificationToken = $('input[name=__RequestVerificationToken]').val();
                    return data;
                };

                function successFunc(data, status) {
                    bindDriver(data);
                };

                function errorFunc(jqXHR, exception) {
                    console.log(jqXHR);
                };

                function bindDriver(data) {
                    $("#DriverMobileNo").val(data.driverMobile);
                    $("#DriverBalance").val(data.balance);
                };
            }
        });
    </script>
    <script>
        $('#CarId').change(function () {
            var value = $('#CarId option:selected').val();
            var index = $("#CarId").prop('selectedIndex');

            if (index != 0) {
                var serviceURL = '@Url.Action("GetCarInfo", "DutySlip")';

                $.ajax({
                    type: "POST",
                    url: serviceURL,
                    data: JSON.stringify(addRequestVerificationToken({ carId: value })),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: successFunc,
                    error: errorFunc
                });

                function addRequestVerificationToken(data) {
                    data.__RequestVerificationToken = $('input[name=__RequestVerificationToken]').val();
                    return data;
                };

                function successFunc(data, status) {
                    bindDriver(data);
                };

                function errorFunc(jqXHR, exception) {
                    console.log(jqXHR);
                };

                function bindDriver(data) {
                    $("#SupplierId").val(data.ownerId);

                    $("#SupplierId").trigger("chosen:updated");
                    $("#SupplierId").trigger("liszt:updated");
                };
            }
        });
    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('#OpeningTime').blur(function () {
                calculateTime();
            });

            $('#ClosingTime').blur(function () {
                calculateTime();
            });

            $('#OpeningKM').blur(function () {
                calculateKm();
            });

            $('#ClosingKM').blur(function () {
                calculateKm();
            });
        });

        function calculateTime() {
            var start = $('#OpeningTime').val().replace(':', '.');
            var end = $('#ClosingTime').val().replace(':', '.');

            var totalTime = parseFloat(end) - parseFloat(start);

            if (!isNaN(totalTime))
                $('#TotalTime').val((totalTime.toFixed(2)));
        };

        function calculateKm() {
            var start = $('#OpeningKM').val();
            var end = $('#ClosingKM').val();

            var totalKm = parseFloat(end) - parseFloat(start);

            if (!isNaN(totalKm))
                $('#TotalKM').val((totalKm.toFixed(2)));
        }
    </script>
    <script>
        $(document).ready(function () {
            $('#ParkingCharge').keyup(function () {
                calculateAmount();
            });

            $('#FuelCharge').keyup(function () {
                calculateAmount();
            });

            $('#OtherCharge').keyup(function () {
                calculateAmount();
            });

            $('#AdvanceDriver').blur(function () {
                calculateAmount();
            });
        });

        function calculateAmount() {
            $('#PaidAmount').val('');
            $('#ReceivedAmount').val('');

            var advanceDriver = $('#AdvanceDriver').val();
            var parking = $('#ParkingCharge').val();
            var fuel = $('#FuelCharge').val();
            var other = $('#OtherCharge').val();

            if (advanceDriver == '')
                advanceDriver = '0'

            if (parking == '')
                parking = '0'

            if (fuel == '')
                fuel = '0'

            if (other == '')
                other = '0'

            var totalAmt = parseFloat(advanceDriver) - (parseFloat(parking) + parseFloat(fuel) + parseFloat(other));

            if (!isNaN(totalAmt)) {
                if (totalAmt < 0) {
                    $('#PaidAmount').val(Math.abs(totalAmt.toFixed(2)));
                }
                else {
                    $('#ReceivedAmount').val(Math.abs(totalAmt.toFixed(2)));
                }
            }
        };
    </script>
}
